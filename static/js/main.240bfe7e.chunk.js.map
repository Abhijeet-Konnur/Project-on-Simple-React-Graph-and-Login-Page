{"version":3,"sources":["components/Card/Card.js","components/SearchBox/SearchBox.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","SearchBox","placeholder","handleChange","type","onChange","Home","e","setState","searchFeild","target","value","state","lastArray","fetch","then","resp","json","result","this","filteredMonsters","filter","toLowerCase","includes","map","data","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAGe,SAASA,EAAKC,GAEzB,OACI,yBAAKC,UAAU,kBAEX,yBAAKA,UAAU,SAASC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,eAC1C,gCAAOL,EAAMI,SAASE,KAAtB,KACA,2BAAIN,EAAMI,SAASG,QCPhB,SAASC,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAC7C,OACI,yBAAKT,UAAU,OACX,2BAAOU,KAAK,SAASN,GAAG,SAASJ,UAAU,SAASQ,YAAaA,EAAaG,SAAUF,K,IC4CrFG,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAiBFH,aAAe,SAACI,GAEd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAlBtC,EAAKC,MAAQ,CACXC,UAAW,GACXJ,YAAa,IAJH,E,gEAQO,IAAD,OAElBK,MADU,8CAEPC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,EAAKV,SAAS,CAAEK,UAAWK,S,+BAWvB,IAAD,EAE4BC,KAAKP,MAAhCC,EAFD,EAECA,UAAWJ,EAFZ,EAEYA,YACbW,EAAmBP,EAAUQ,QAAO,SAAAR,GAAS,OAAIA,EAAUd,KAAKuB,cAAcC,SAASd,EAAYa,kBACzG,OACE,oCACE,wBAAI5B,UAAU,WAAd,sBACA,kBAACO,EAAD,CAAWC,YAAY,iBAAiBC,aAAcgB,KAAKhB,eAC3D,yBAAKT,UAAU,aACZ0B,EAAiBI,KAAI,SAACC,GAAD,OAEpB,kBAACjC,EAAD,CAAMK,SAAU4B,a,GArCTC,aCYJC,E,uKARX,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,W,GANUgC,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.240bfe7e.chunk.js","sourcesContent":["import React from 'react'\r\n//import Home from '../Home'\r\n\r\nexport default function Card(props) {\r\n    //console.log(props.monsters)\r\n    return (\r\n        <div className='card-container'>\r\n\r\n            <img className='holder' alt='monsters' src={`https://robohash.org/${props.monsters.id}?set=set2`} />\r\n            <h2 > {props.monsters.name} </h2>\r\n            <p>{props.monsters.email}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\n\r\nexport default function SearchBox({ placeholder, handleChange }) {\r\n    return (\r\n        <div className='Box'>\r\n            <input type='search' id='search' className='search' placeholder={placeholder} onChange={handleChange} />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Card from './Card/Card'\r\nimport SearchBox from './SearchBox/SearchBox';\r\n\r\nclass Home extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      lastArray: [],\r\n      searchFeild: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var url = 'https://jsonplaceholder.typicode.com/users'\r\n    fetch(url)\r\n      .then(resp => resp.json())\r\n      .then(result => {\r\n        this.setState({ lastArray: result },\r\n        )\r\n      })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    // console.log('>>', e.target.value )\r\n    this.setState({ searchFeild: e.target.value })\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const { lastArray, searchFeild } = this.state;\r\n    const filteredMonsters = lastArray.filter(lastArray => lastArray.name.toLowerCase().includes(searchFeild.toLowerCase()))\r\n    return (\r\n      <>\r\n        <h1 className='monster'> Monsters Rolodex </h1>\r\n        <SearchBox placeholder='search monster' handleChange={this.handleChange} />\r\n        <div className='card-list'>\r\n          {filteredMonsters.map((data) => (\r\n\r\n            <Card monsters={data} />\r\n          ))}\r\n        </div>\r\n      </>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './components/Home'\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}